// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	PingReport(ctx context.Context, in *PingReportReq, opts ...grpc.CallOption) (*Empty, error)
	TcpPingReport(ctx context.Context, in *TcpPingReportReq, opts ...grpc.CallOption) (*Empty, error)
	FpingReport(ctx context.Context, in *FPingReportReq, opts ...grpc.CallOption) (*Empty, error)
	MtrReport(ctx context.Context, in *MTRReportReq, opts ...grpc.CallOption) (*Empty, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) PingReport(ctx context.Context, in *PingReportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/collector_grpc.Collector/PingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) TcpPingReport(ctx context.Context, in *TcpPingReportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/collector_grpc.Collector/TcpPingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) FpingReport(ctx context.Context, in *FPingReportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/collector_grpc.Collector/FpingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorClient) MtrReport(ctx context.Context, in *MTRReportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/collector_grpc.Collector/MtrReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	PingReport(context.Context, *PingReportReq) (*Empty, error)
	TcpPingReport(context.Context, *TcpPingReportReq) (*Empty, error)
	FpingReport(context.Context, *FPingReportReq) (*Empty, error)
	MtrReport(context.Context, *MTRReportReq) (*Empty, error)
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) PingReport(context.Context, *PingReportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingReport not implemented")
}
func (UnimplementedCollectorServer) TcpPingReport(context.Context, *TcpPingReportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TcpPingReport not implemented")
}
func (UnimplementedCollectorServer) FpingReport(context.Context, *FPingReportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FpingReport not implemented")
}
func (UnimplementedCollectorServer) MtrReport(context.Context, *MTRReportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MtrReport not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_PingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).PingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector_grpc.Collector/PingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).PingReport(ctx, req.(*PingReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_TcpPingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpPingReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).TcpPingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector_grpc.Collector/TcpPingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).TcpPingReport(ctx, req.(*TcpPingReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_FpingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FPingReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).FpingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector_grpc.Collector/FpingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).FpingReport(ctx, req.(*FPingReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collector_MtrReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTRReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServer).MtrReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector_grpc.Collector/MtrReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServer).MtrReport(ctx, req.(*MTRReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector_grpc.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingReport",
			Handler:    _Collector_PingReport_Handler,
		},
		{
			MethodName: "TcpPingReport",
			Handler:    _Collector_TcpPingReport_Handler,
		},
		{
			MethodName: "FpingReport",
			Handler:    _Collector_FpingReport_Handler,
		},
		{
			MethodName: "MtrReport",
			Handler:    _Collector_MtrReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collector.proto",
}
