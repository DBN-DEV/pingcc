// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/DBN-DEV/pingcc/domain"
	mock "github.com/stretchr/testify/mock"
)

// AgentRepo is an autogenerated mock type for the AgentRepo type
type AgentRepo struct {
	mock.Mock
}

type AgentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentRepo) EXPECT() *AgentRepo_Expecter {
	return &AgentRepo_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, uid
func (_m *AgentRepo) Find(ctx context.Context, uid uint64) (*domain.Agent, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Agent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.Agent, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Agent); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Agent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentRepo_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type AgentRepo_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uint64
func (_e *AgentRepo_Expecter) Find(ctx interface{}, uid interface{}) *AgentRepo_Find_Call {
	return &AgentRepo_Find_Call{Call: _e.mock.On("Find", ctx, uid)}
}

func (_c *AgentRepo_Find_Call) Run(run func(ctx context.Context, uid uint64)) *AgentRepo_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *AgentRepo_Find_Call) Return(_a0 *domain.Agent, _a1 error) *AgentRepo_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentRepo_Find_Call) RunAndReturn(run func(context.Context, uint64) (*domain.Agent, error)) *AgentRepo_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Heartbeat provides a mock function with given fields: ctx, uid
func (_m *AgentRepo) Heartbeat(ctx context.Context, uid uint64) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Heartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentRepo_Heartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeat'
type AgentRepo_Heartbeat_Call struct {
	*mock.Call
}

// Heartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - uid uint64
func (_e *AgentRepo_Expecter) Heartbeat(ctx interface{}, uid interface{}) *AgentRepo_Heartbeat_Call {
	return &AgentRepo_Heartbeat_Call{Call: _e.mock.On("Heartbeat", ctx, uid)}
}

func (_c *AgentRepo_Heartbeat_Call) Run(run func(ctx context.Context, uid uint64)) *AgentRepo_Heartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *AgentRepo_Heartbeat_Call) Return(_a0 error) *AgentRepo_Heartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AgentRepo_Heartbeat_Call) RunAndReturn(run func(context.Context, uint64) error) *AgentRepo_Heartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgentRepo creates a new instance of AgentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentRepo {
	mock := &AgentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
