// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/DBN-DEV/pingcc/domain"
	mock "github.com/stretchr/testify/mock"
)

// TSDB is an autogenerated mock type for the TSDB type
type TSDB struct {
	mock.Mock
}

type TSDB_Expecter struct {
	mock *mock.Mock
}

func (_m *TSDB) EXPECT() *TSDB_Expecter {
	return &TSDB_Expecter{mock: &_m.Mock}
}

// InsertPingResult provides a mock function with given fields: ctx, result
func (_m *TSDB) InsertPingResult(ctx context.Context, result domain.PingResult) error {
	ret := _m.Called(ctx, result)

	if len(ret) == 0 {
		panic("no return value specified for InsertPingResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PingResult) error); ok {
		r0 = rf(ctx, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TSDB_InsertPingResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertPingResult'
type TSDB_InsertPingResult_Call struct {
	*mock.Call
}

// InsertPingResult is a helper method to define mock.On call
//   - ctx context.Context
//   - result domain.PingResult
func (_e *TSDB_Expecter) InsertPingResult(ctx interface{}, result interface{}) *TSDB_InsertPingResult_Call {
	return &TSDB_InsertPingResult_Call{Call: _e.mock.On("InsertPingResult", ctx, result)}
}

func (_c *TSDB_InsertPingResult_Call) Run(run func(ctx context.Context, result domain.PingResult)) *TSDB_InsertPingResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PingResult))
	})
	return _c
}

func (_c *TSDB_InsertPingResult_Call) Return(_a0 error) *TSDB_InsertPingResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TSDB_InsertPingResult_Call) RunAndReturn(run func(context.Context, domain.PingResult) error) *TSDB_InsertPingResult_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTcpPingResult provides a mock function with given fields: ctx, result
func (_m *TSDB) InsertTcpPingResult(ctx context.Context, result domain.TcpPingResult) error {
	ret := _m.Called(ctx, result)

	if len(ret) == 0 {
		panic("no return value specified for InsertTcpPingResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TcpPingResult) error); ok {
		r0 = rf(ctx, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TSDB_InsertTcpPingResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTcpPingResult'
type TSDB_InsertTcpPingResult_Call struct {
	*mock.Call
}

// InsertTcpPingResult is a helper method to define mock.On call
//   - ctx context.Context
//   - result domain.TcpPingResult
func (_e *TSDB_Expecter) InsertTcpPingResult(ctx interface{}, result interface{}) *TSDB_InsertTcpPingResult_Call {
	return &TSDB_InsertTcpPingResult_Call{Call: _e.mock.On("InsertTcpPingResult", ctx, result)}
}

func (_c *TSDB_InsertTcpPingResult_Call) Run(run func(ctx context.Context, result domain.TcpPingResult)) *TSDB_InsertTcpPingResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TcpPingResult))
	})
	return _c
}

func (_c *TSDB_InsertTcpPingResult_Call) Return(_a0 error) *TSDB_InsertTcpPingResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TSDB_InsertTcpPingResult_Call) RunAndReturn(run func(context.Context, domain.TcpPingResult) error) *TSDB_InsertTcpPingResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewTSDB creates a new instance of TSDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTSDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *TSDB {
	mock := &TSDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
